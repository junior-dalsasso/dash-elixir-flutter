syntax = "proto3";

import "google/api/annotations.proto";

package DashElixirFlutter;

// The actual RPC service definition with HTTP/2 endpoints defined
service RPC {
  rpc StreamInfo (Empty) returns (stream StreamData) {
    option (google.api.http) = {
        get: "/streamInfo"
    };
  }

  rpc startCalibration (Empty) returns (Empty) {
    option (google.api.http) = {
        get: "/startCalibration"
    };
  }

  rpc resetTrip (Empty) returns (Empty) {
    option (google.api.http) = {
        get: "/resetTrip"
    };
  }

  rpc resetHodometer (Empty) returns (Empty) {
    option (google.api.http) = {
        get: "/resetHodometer"
    };
  }

  rpc RebootSystem (Empty) returns (Empty) {
    option (google.api.http) = {
        get: "/rebootSystem"
    };
  }

  rpc listBluetoothDevices (Empty) returns (DeviceList) {
    option (google.api.http) = {
        get: "/listBluetoothDevices"
    };
  }

  rpc tryConnectDevice (Device) returns (ActionResult) {
    option (google.api.http) = {
        get: "/tryConnectDevice"
    };
  }
}

message Empty {}

message EcuData {
  float seconds = 1;
  float pulseWidth1 = 2;
  float pulseWidth2 = 3;
  float rpm = 4;
  float advance = 5;
  float squirt = 6;
  StatusMotor engine  = 7;
  float afrtgt1 = 8;
  float afrtgt2 = 9;
  float wbo2_en1 = 10;
  float wbo2_en2 = 11;
  float barometer = 12;
  float map = 13;
  float mat = 14;
  float coolant = 15;
  float tps = 16;
  float batteryVoltage = 17;
  float afr1 = 18;
  float afr2 = 19;
  float knock = 20;
  float egoCorrection1 = 21;
  float egoCorrection2 = 22;
  float airCorrection = 23;
  float warmupEnrich = 24;
  float accelEnrich = 25;
  float tpsfuelcut = 26;
  float baroCorrection = 27;
  float gammaEnrich = 28;
  float veCurr1 = 29;
  float veCurr2 = 30;
  float iacstep = 31;
  float coldAdvDeg = 32;
  float tpsDot = 33;
  float mapDot = 34;
  float dwell = 35;
  float mafload = 36;
  float fuelload = 37;
  float fuelCorrection = 38;
  float portStatus = 39;
  float knockRetard = 40;
  float eaeFuelCorr1 = 41;
  float egoV = 42;
  float egoV2 = 43;
  float status1 = 44;
  float status2 = 45;
  float status3 = 46;
  float status4 = 47;
  float looptime = 48;
  float status5 = 49;
  float tpsADC = 50;
  float fuelload2 = 51;
  float ignload = 52;
  float ignload2 = 53;
  float synccnt = 54;
  float timing_err = 55;
  float deltaT = 56;
  float wallfuel1 = 57;
  float wallfuel2 = 58;
  float eaeFuelCorr2 = 59;
  float boostduty = 60;
  float syncreason = 61;
  float user0 = 62;
  float inj_adv1 = 63;
  float inj_adv2 = 64;
  float pulseWidth3 = 65;
  float pulseWidth4 = 66;
  float vetrim1curr = 67;
  float vetrim2curr = 68;
  float vetrim3curr = 69;
  float vetrim4curr = 70;
  float maf = 71;
  float eaeload1 = 72;
  float afrload1 = 73;
  float rpmDot = 74;
  float gpioport0 = 75;
  float gpioport1 = 76;
  float gpioport2 = 77;
  float cl_idle_targ_rpm = 78;
  float maf_volts = 79;
  float airtemp = 80;
  float dwell_trl = 81;
  float fuel_pct = 82;
  float boost_targ = 83;
  float ext_advance = 84;
  float base_advance = 85;
  float idle_cor_advance = 86;
  float mat_retard = 87;
  float flex_advance = 88;
  float adv1 = 89;
  float adv2 = 90;
  float adv3 = 91;
  float revlim_retard = 92;
  float nitrous_retard = 93;
  float deadtime1 = 94;
  float n2o_addfuel = 95;
  float portbde = 96;
  float portam = 97;
  float portt = 98;
  float can_error_cnt = 99;
  float can_error = 100;
  float oil = 101;
  float fuel = 102;
  float runsecs = 103;
  float start_retard = 104;
  bool connected = 105;
}

message StatusMotor {
  bool motor_pronto = 1;
  bool motor_em_partida = 2;
  bool enriquecimento_partida = 3;
  bool ciclo_aquecimento = 4;
}

message ConsumptionData {
  float hodometer = 1;
  float trip = 2;
  float hodometer_consumed = 3;
  float trip_consumed = 4;
  float hodometer_fuel_by_distance = 5;
  float trip_fuel_by_distance = 6;
  float current_speed = 7;
}

message StreamData {
  EcuData ecu_data = 1;
  ConsumptionData consumption_data = 2;
}

message Device {
  string name = 1;
  string address = 2;
}

message DeviceList {
  repeated Device devices = 1;
}

message ActionResult {
  bool result = 1;
}
